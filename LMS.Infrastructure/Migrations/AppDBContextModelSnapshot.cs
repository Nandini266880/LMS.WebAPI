// <auto-generated />
using System;
using LMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LMS.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Learn the basics of C# programming language and object-oriented concepts.",
                            Price = 49.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb1.jpg",
                            Title = "Introduction to C#"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 2,
                            Description = "Deep dive into JavaScript, including ES6+, asynchronous programming, and modern frameworks.",
                            Price = 59.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb2.jpg",
                            Title = "Advanced JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 3,
                            Description = "Use Python to analyze data, visualize insights, and apply machine learning models.",
                            Price = 69.989999999999995,
                            ThumbnailUrl = "https://example.com/thumb3.jpg",
                            Title = "Python for Data Science"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Build dynamic web applications using React, Redux, and modern frontend tooling.",
                            Price = 79.989999999999995,
                            ThumbnailUrl = "https://example.com/thumb4.jpg",
                            Title = "Web Development with React"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 2,
                            Description = "Learn how to query, manipulate, and manage data using SQL databases.",
                            Price = 39.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb5.jpg",
                            Title = "SQL for Beginners"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Create robust web applications using ASP.NET Core MVC framework.",
                            Price = 59.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb6.jpg",
                            Title = "ASP.NET Core MVC"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 3,
                            Description = "Understand fundamental concepts of machine learning and build predictive models.",
                            Price = 89.989999999999995,
                            ThumbnailUrl = "https://example.com/thumb7.jpg",
                            Title = "Machine Learning Basics"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 2,
                            Description = "Master HTML and CSS to design beautiful and responsive web pages.",
                            Price = 29.989999999999998,
                            ThumbnailUrl = "https://example.com/thumb8.jpg",
                            Title = "Frontend with HTML & CSS"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 3,
                            Description = "Learn Java programming, object-oriented principles, and application development.",
                            Price = 49.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb9.jpg",
                            Title = "Java Fundamentals"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 1,
                            Description = "Build scalable backend applications using Node.js and Express framework.",
                            Price = 59.990000000000002,
                            ThumbnailUrl = "https://example.com/thumb10.jpg",
                            Title = "Node.js & Express"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = 3,
                            Description = "Create 2D and 3D games using Unity engine and C# scripting.",
                            Price = 79.989999999999995,
                            ThumbnailUrl = "https://example.com/thumb30.jpg",
                            Title = "Game Development with Unity"
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            EnrolledAt = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 5,
                            EnrolledAt = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            EnrolledAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 6,
                            EnrolledAt = new DateTime(2025, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            EnrolledAt = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 7,
                            EnrolledAt = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "C# Basics Quiz",
                            TotalMarks = 50
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JavaScript ES6 Test",
                            TotalMarks = 60
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Python Data Science Final",
                            TotalMarks = 100
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            CreatedAt = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "React Components Midterm",
                            TotalMarks = 80
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SQL Fundamentals Quiz",
                            TotalMarks = 40
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "JS Mid Term",
                            TotalMarks = 90
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.ExamAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamAttempts");

                    b.HasData(
                        new
                        {
                            AttemptId = 1,
                            AttemptedAt = new DateTime(2025, 1, 5, 10, 0, 0, 0, DateTimeKind.Utc),
                            ExamId = 1,
                            Score = 85,
                            UserId = 1
                        },
                        new
                        {
                            AttemptId = 2,
                            AttemptedAt = new DateTime(2025, 1, 6, 11, 30, 0, 0, DateTimeKind.Utc),
                            ExamId = 1,
                            Score = 72,
                            UserId = 2
                        },
                        new
                        {
                            AttemptId = 3,
                            AttemptedAt = new DateTime(2025, 1, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            ExamId = 2,
                            Score = 90,
                            UserId = 1
                        },
                        new
                        {
                            AttemptId = 4,
                            AttemptedAt = new DateTime(2025, 1, 9, 16, 0, 0, 0, DateTimeKind.Utc),
                            ExamId = 2,
                            Score = 60,
                            UserId = 3
                        },
                        new
                        {
                            AttemptId = 5,
                            AttemptedAt = new DateTime(2025, 1, 10, 18, 0, 0, 0, DateTimeKind.Utc),
                            ExamId = 3,
                            Score = 77,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("LessonIdx")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId", "LessonIdx")
                        .IsUnique();

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentUrl = "",
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 30,
                            LessonIdx = 1,
                            Title = "Introduction to C# Environment"
                        },
                        new
                        {
                            Id = 2,
                            ContentUrl = "",
                            CourseId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 45,
                            LessonIdx = 2,
                            Title = "Variables and Data Types"
                        },
                        new
                        {
                            Id = 3,
                            ContentUrl = "",
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 40,
                            LessonIdx = 1,
                            Title = "JavaScript ES6 Features"
                        },
                        new
                        {
                            Id = 4,
                            ContentUrl = "",
                            CourseId = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 50,
                            LessonIdx = 2,
                            Title = "Asynchronous JavaScript"
                        },
                        new
                        {
                            Id = 5,
                            ContentUrl = "",
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 35,
                            LessonIdx = 1,
                            Title = "Python Basics"
                        },
                        new
                        {
                            Id = 6,
                            ContentUrl = "",
                            CourseId = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 50,
                            LessonIdx = 2,
                            Title = "Data Analysis with Pandas"
                        },
                        new
                        {
                            Id = 7,
                            ContentUrl = "",
                            CourseId = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 40,
                            LessonIdx = 1,
                            Title = "React Components"
                        },
                        new
                        {
                            Id = 8,
                            ContentUrl = "",
                            CourseId = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 45,
                            LessonIdx = 2,
                            Title = "State and Props"
                        },
                        new
                        {
                            Id = 9,
                            ContentUrl = "",
                            CourseId = 5,
                            CreatedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 30,
                            LessonIdx = 1,
                            Title = "Introduction to SQL"
                        },
                        new
                        {
                            Id = 10,
                            ContentUrl = "",
                            CourseId = 5,
                            CreatedAt = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 50,
                            LessonIdx = 2,
                            Title = "Advanced SQL Queries"
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = false,
                            OptionText = "2 bytes",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = true,
                            OptionText = "4 bytes",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            OptionText = "8 bytes",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            OptionText = "define",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = true,
                            OptionText = "class",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            OptionText = "struct",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = true,
                            OptionText = "Arrow Functions",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            OptionText = "Goto Statement",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            OptionText = "Pipelines",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = true,
                            OptionText = "fetch()",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            OptionText = "getData()",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            OptionText = "httpRequest()",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 13,
                            IsCorrect = true,
                            OptionText = "SELECT",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 14,
                            IsCorrect = false,
                            OptionText = "GET",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 15,
                            IsCorrect = false,
                            OptionText = "FETCH",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 16,
                            IsCorrect = true,
                            OptionText = "WHERE",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 17,
                            IsCorrect = false,
                            OptionText = "ORDER BY",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 18,
                            IsCorrect = false,
                            OptionText = "GROUP BY",
                            QuestionId = 6
                        },
                        new
                        {
                            Id = 19,
                            IsCorrect = true,
                            OptionText = "Encapsulation",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 20,
                            IsCorrect = true,
                            OptionText = "Inheritance",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 21,
                            IsCorrect = true,
                            OptionText = "Polymorphism",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 22,
                            IsCorrect = false,
                            OptionText = "Recursion",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 23,
                            IsCorrect = true,
                            OptionText = "Abstraction",
                            QuestionId = 7
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProgressId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            ProgressId = 1,
                            CompletedAt = new DateTime(2025, 1, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = true,
                            LessonId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ProgressId = 2,
                            IsCompleted = false,
                            LessonId = 2,
                            UserId = 1
                        },
                        new
                        {
                            ProgressId = 3,
                            CompletedAt = new DateTime(2025, 1, 12, 15, 30, 0, 0, DateTimeKind.Utc),
                            IsCompleted = true,
                            LessonId = 3,
                            UserId = 2
                        },
                        new
                        {
                            ProgressId = 4,
                            CompletedAt = new DateTime(2025, 1, 15, 9, 0, 0, 0, DateTimeKind.Utc),
                            IsCompleted = true,
                            LessonId = 4,
                            UserId = 3
                        },
                        new
                        {
                            ProgressId = 5,
                            IsCompleted = false,
                            LessonId = 5,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExamId = 1,
                            Marks = 5,
                            QuestionText = "What is the size of int in C#?"
                        },
                        new
                        {
                            Id = 2,
                            ExamId = 1,
                            Marks = 5,
                            QuestionText = "Which keyword is used to define a class in C#?"
                        },
                        new
                        {
                            Id = 3,
                            ExamId = 2,
                            Marks = 5,
                            QuestionText = "Which of the following is a JavaScript ES6 feature?"
                        },
                        new
                        {
                            Id = 4,
                            ExamId = 2,
                            Marks = 5,
                            QuestionText = "Which method is used to fetch data asynchronously in JavaScript?"
                        },
                        new
                        {
                            Id = 5,
                            ExamId = 5,
                            Marks = 5,
                            QuestionText = "Which SQL keyword is used to retrieve data from a database?"
                        },
                        new
                        {
                            Id = 6,
                            ExamId = 5,
                            Marks = 5,
                            QuestionText = "Which SQL clause is used to filter records?"
                        },
                        new
                        {
                            Id = 7,
                            ExamId = 1,
                            Marks = 5,
                            QuestionText = "Which of the following are OOP principles?"
                        });
                });

            modelBuilder.Entity("LMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Course", b =>
                {
                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Exam", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.Domain.Entities.ExamAttempt", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Exam", "Exam")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("ExamAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Option", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Payment", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Progress", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Domain.Entities.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.HasOne("LMS.Domain.Entities.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Exams");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamAttempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("LMS.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("LMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("ExamAttempts");

                    b.Navigation("Progresses");
                });
#pragma warning restore 612, 618
        }
    }
}
